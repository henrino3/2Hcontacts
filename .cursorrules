
  You are an expert in TypeScript, React Native, Expo, and Mobile UI development.
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  - Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - Use strict mode in TypeScript for better type safety.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Use Prettier for consistent code formatting.

  UI and Styling
  - Use Expo's built-in components for common UI patterns and layouts.
  - Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
  - Use styled-components or Tailwind CSS for component styling.
  - Implement dark mode support using Expo's useColorScheme.
  - Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
  - Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

  Safe Area Management
  - Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
  - Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
  - Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
  - Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

  Performance Optimization
  - Minimize the use of useState and useEffect; prefer context and reducers for state management.
  - Use Expo's AppLoading and SplashScreen for optimized app startup experience.
  - Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
  - Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
  - Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.
  - Use dynamic routes with expo-router for better navigation handling.

  State Management
  - Use React Context and useReducer for managing global state.
  - Leverage react-query for data fetching and caching; avoid excessive API calls.
  - For complex state management, consider using Zustand or Redux Toolkit.
  - Handle URL search parameters using libraries like expo-linking.

  Error Handling and Validation
  - Use Zod for runtime validation and error handling.
  - Implement proper error logging using Sentry or a similar service.
  - Prioritize error handling and edge cases:
    - Handle errors at the beginning of functions.
    - Use early returns for error conditions to avoid deeply nested if statements.
    - Avoid unnecessary else statements; use if-return pattern instead.
    - Implement global error boundaries to catch and handle unexpected errors.
  - Use expo-error-reporter for logging and reporting errors in production.

  Testing
  - Write unit tests using Jest and React Native Testing Library.
  - Implement integration tests for critical user flows using Detox.
  - Use Expo's testing tools for running tests in different environments.
  - Consider snapshot testing for components to ensure UI consistency.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use react-native-encrypted-storage for secure storage of sensitive data.
  - Ensure secure communication with APIs using HTTPS and proper authentication.
  - Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

  Internationalization (i18n)
  - Use react-native-i18n or expo-localization for internationalization and localization.
  - Support multiple languages and RTL layouts.
  - Ensure text scaling and font adjustments for accessibility.

  Key Conventions
  1. Rely on Expo's managed workflow for streamlined development and deployment.
  2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
  3. Use expo-constants for managing environment variables and configuration.
  4. Use expo-permissions to handle device permissions gracefully.
  5. Implement expo-updates for over-the-air (OTA) updates.
  6. Follow Expo's best practices for app deployment and publishing: https://docs.expo.dev/distribution/introduction/
  7. Ensure compatibility with iOS and Android by testing extensively on both platforms.

  API Documentation
  - Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Refer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.
    
/**
 * Task Completion Marking Rules
 * 
 * When marking tasks as complete in markdown files:
 * 1. Add a checkmark (✅) at the end of the completed task
 * 2. Add checkmarks to all completed sub-tasks
 * 3. Only mark tasks as complete when all their sub-tasks are complete
 * 4. Use the exact checkmark emoji: ✅
 * 
 * Example:
 * - Main Task ✅
 *   - Sub-task 1 ✅
 *   - Sub-task 2 ✅
 * - Incomplete Task
 *   - Sub-task 1
 *   - Sub-task 2
 */

// Function to validate task completion marking
function validateTaskCompletion(markdownContent) {
  // Check if completed tasks have checkmarks
  const completedTaskPattern = /^-\s+.*[^✅]\s*$/;
  
  // Check if all sub-tasks are completed when parent is marked complete
  const parentTaskPattern = /^-\s+.*✅\s*$/;
  
  // Ensure consistent checkmark usage
  const invalidCheckmarkPattern = /[^✅]✓|[^✅]☑|[^✅]✔/;
  
  return {
    rules: [
      {
        pattern: completedTaskPattern,
        message: "Completed tasks should end with a checkmark (✅)"
      },
      {
        pattern: parentTaskPattern,
        message: "Parent tasks should only be marked complete when all sub-tasks are complete"
      },
      {
        pattern: invalidCheckmarkPattern,
        message: "Use the standard checkmark emoji (✅) for consistency"
      }
    ]
  };
}

/**
 * Test Coverage Requirements
 * 
 * All code changes must include corresponding tests:
 * 1. Backend:
 *    - Unit tests for all models (validation, methods, edge cases)
 *    - Unit tests for utilities and helpers
 *    - Integration tests for controllers and routes
 *    - E2E tests for critical user flows
 *    - Minimum 80% test coverage for new code
 * 
 * 2. Frontend:
 *    - Unit tests for components (props, events, state)
 *    - Unit tests for hooks and utilities
 *    - Integration tests for screens and navigation
 *    - E2E tests for critical user flows
 *    - Minimum 80% test coverage for new code
 * 
 * Test File Structure:
 * - Place tests next to the code they test
 * - Name test files with *.test.ts or *.test.tsx extension
 * - Group related tests in describe blocks
 * - Use meaningful test descriptions
 * 
 * Example:
 * src/
 * ├── components/
 * │   ├── Button.tsx
 * │   └── Button.test.tsx
 * ├── utils/
 * │   ├── format.ts
 * │   └── format.test.ts
 * 
 * Test Description Format:
 * describe('ComponentName', () => {
 *   describe('behavior/method', () => {
 *     it('should expected_behavior when condition', () => {
 *       // test code
 *     });
 *   });
 * });
 */

// Function to validate test coverage
function validateTestCoverage(codeChanges) {
  return {
    rules: [
      {
        pattern: /^(?!.*\.test\.(ts|tsx)$).*\.(ts|tsx)$/,
        message: "New or modified code files must have corresponding test files"
      },
      {
        pattern: /describe\(.*\)/,
        message: "Tests must be organized in describe blocks"
      },
      {
        pattern: /it\(.*\)/,
        message: "Individual tests must use it blocks with clear descriptions"
      }
    ],
    coverage: {
      statements: 80,
      branches: 80,
      functions: 80,
      lines: 80
    }
  };
}

## 9. Version Control and GitHub Integration

1. GitHub Push Reminders
   - After completing major code updates, ask the user if they want to push to GitHub
   - Major updates include:
     - Adding new features
     - Implementing tests
     - Making significant changes to existing code
     - Updating project configuration
     - Adding new dependencies

2. Commit Message Guidelines
   - Use conventional commit format
   - Include descriptive messages
   - Reference related issues or tasks
   - Example formats:
     - feat: Add new feature
     - fix: Fix bug in existing feature
     - test: Add or update tests
     - chore: Update configuration or dependencies
     - docs: Update documentation

3. Branch Management
   - Confirm current branch before pushing
   - Suggest creating feature branches for new features
   - Recommend merging strategies when applicable

4. Code Review Preparation
   - Summarize changes being pushed
   - List files modified
   - Highlight test coverage changes
   - Note any configuration updates
    
/**
 * Task Completion Workflow
 * 
 * After completing any task or sub-task:
 * 1. IMMEDIATELY check the development plan
 * 2. Mark completed tasks with checkmark (✅)
 * 3. Commit development plan changes separately
 * 
 * Required Steps:
 * 1. Code Implementation ➡️ Test Implementation ➡️ Mark Tasks Complete
 *    - Complete code implementation
 *    - Write and verify tests
 *    - Check development plan
 *    - Mark tasks and sub-tasks complete
 *    - Commit plan updates with "docs:" prefix
 * 
 * 2. Task Marking Process
 *    - Start from innermost sub-tasks
 *    - Work outward to parent tasks
 *    - Use exact checkmark emoji: ✅
 *    - Parent task only marked when ALL sub-tasks complete
 * 
 * 3. Commit Process
 *    - Commit development plan updates BEFORE code commits
 *    - Use "docs: Update development plan - [task name] ✅"
 *    - Push immediately after commit
 * 
 * Example Workflow:
 * 1. Complete code task
 * 2. Write and verify tests
 * 3. IMMEDIATELY check development plan
 * 4. Mark tasks complete with ✅
 * 5. Commit plan update
 * 6. Push changes
 * 7. Continue with next task
 */    